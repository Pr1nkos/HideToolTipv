--tooltip_manager.script

local hide_mode = nil
local KEY_HIDE = nil
local KEY_MODIFIER = nil
local SHOW_TOOLTIP_ON_CLICK = nil
local holding_key_hide = false
local holding_key_mod = false
local delay = nil
local mouse_clicked = false

local KEY_PRESSED = ui_events.WINDOW_KEY_PRESSED
local KEY_RELEASED = ui_events.WINDOW_KEY_RELEASED

local original_methods = {
	Update = utils_ui.UIInfoItem.Update,
	OnKeyboard = {
		Inventory = ui_inventory.UIInventory.OnKeyboard,
		WorkshopRepair = ui_workshop.UIWorkshopRepair.OnKeyboard,
		WorkshopCraft = ui_workshop.UIWorkshopCraft.OnKeyboard,
		WorkshopUpgrade = ui_workshop.UIWorkshopUpgrade.OnKeyboard,
		MutantLoot = ish_ui_mutant_loot.Ishy_OnKeyboard,
		Cook = item_cooking.UICook.OnKeyboard,
		Recipe = item_recipe.UIRecipe.OnKeyboard,
	},
	OnLeftMouseButtonClick = ui_inventory.UIInventory.On_CC_Mouse1,
}

function toggle_hide_mode()
	hide_mode = not hide_mode
	holding_key_hide = false
	holding_key_mod = false
end

function handle_keyboard_input(dik, keyboard_action)
	if keyboard_action == KEY_PRESSED then
		if dik == KEY_MODIFIER then
			holding_key_mod = true
		elseif dik == KEY_HIDE then
			holding_key_hide = true
			if holding_key_mod then
				toggle_hide_mode()
			end
		end
	elseif keyboard_action == KEY_RELEASED then
		if dik == KEY_HIDE then
			holding_key_hide = false
		elseif dik == KEY_MODIFIER then
			holding_key_mod = false
		end
	end
end

function ui_inventory.UIInventory:OnKeyboard(dik, keyboard_action)
	handle_keyboard_input(dik, keyboard_action)
	return original_methods.OnKeyboard.Inventory(self, dik, keyboard_action)
end

function ui_workshop.UIWorkshopRepair:OnKeyboard(dik, keyboard_action)
	handle_keyboard_input(dik, keyboard_action)
	return original_methods.OnKeyboard.WorkshopRepair(self, dik, keyboard_action)
end

function ui_workshop.UIWorkshopCraft:OnKeyboard(dik, keyboard_action)
	handle_keyboard_input(dik, keyboard_action)
	return original_methods.OnKeyboard.WorkshopCraft(self, dik, keyboard_action)
end

function ui_workshop.UIWorkshopUpgrade:OnKeyboard(dik, keyboard_action)
	handle_keyboard_input(dik, keyboard_action)
	return original_methods.OnKeyboard.WorkshopUpgrade(self, dik, keyboard_action)
end

function ish_ui_mutant_loot.Ishy_OnKeyboard(sender, dik, keyboard_action)
	handle_keyboard_input(dik, keyboard_action)

	if keyboard_action == KEY_PRESSED and dik == KEY_HIDE then
		return true
	end

	if keyboard_action == KEY_RELEASED and dik == KEY_HIDE then
		return true
	end

	return original_methods.OnKeyboard.MutantLoot(sender, dik, keyboard_action)
end

function item_cooking.UICook:OnKeyboard(dik, keyboard_action)
	handle_keyboard_input(dik, keyboard_action)
	return original_methods.OnKeyboard.Cook(self, dik, keyboard_action)
end

function item_recipe.UIRecipe:OnKeyboard(dik, keyboard_action)
	handle_keyboard_input(dik, keyboard_action)

	if keyboard_action == KEY_PRESSED and dik == KEY_HIDE and holding_key_mod then
		return true
	end

	return original_methods.OnKeyboard.Recipe(self, dik, keyboard_action)
end

function ui_itm_details.UIItemSheet:OnKeyboard(dik, keyboard_action)
	handle_keyboard_input(dik, keyboard_action)

	if keyboard_action == KEY_PRESSED and dik == DIK_keys.DIK_ESCAPE then
		self:Close()
		return true
	end

	return false
end

function ui_inventory.UIInventory:On_CC_Mouse1(bag, idx)
	if hide_mode then
		mouse_clicked = true
	end
	original_methods.OnLeftMouseButtonClick(self, bag, idx)
end

function utils_ui.UIInfoItem:Update(obj, sec, flags)
	original_methods.Update(self, obj, sec, flags)
	if hide_mode then
		self.delay = 50
	else
		self.delay = delay
	end

	if not obj then
		mouse_clicked = false
	end

	if mouse_clicked and SHOW_TOOLTIP_ON_CLICK then
		self.dialog:Show(true)
	elseif hide_mode then
		self.dialog:Show(holding_key_hide)
	else
		self.dialog:Show(not holding_key_hide)
	end

	if not self:Pass(obj, sec) then
		self:Show(false)
		return
	end

	local screen_width, screen_height = 1024, 768
	local cursor_position = GetCursorPosition()
	local tooltip_width = self.frame:GetWidth() or self.dialog.GetWidth()
	local tooltip_height = self.frame:GetHeight() or self.dialog.GetHeight()
	local tooltip_position = vector2():set(cursor_position.x + 20, cursor_position.y + 20)

	if tooltip_position.x + tooltip_width > screen_width then
		tooltip_position.x = screen_width - tooltip_width
		tooltip_position.y = cursor_position.y + 20
	end

	if tooltip_position.y + tooltip_height > screen_height then
		tooltip_position.y = cursor_position.y - tooltip_height - 20
	end

	if tooltip_position.y < 0 then
		tooltip_position.y = 0
		tooltip_position.x = cursor_position.x - tooltip_width - 20
	end

	if tooltip_position.x < 0 then
		tooltip_position.x = cursor_position.x + 20
	end

	self.dialog:SetWndPos(tooltip_position)
end

function on_option_change()
	KEY_HIDE = ui_mcm.get("tooltip_manager/key_hide")
	KEY_MODIFIER = ui_mcm.get("tooltip_manager/key_modifier")
	hide_mode = ui_mcm.get("tooltip_manager/hide_mode")
	delay = ui_mcm.get("tooltip_manager/delay")
	SHOW_TOOLTIP_ON_CLICK = ui_mcm.get("tooltip_manager/show_tooltip_on_click")
end

function on_game_start()
	on_option_change()
	if ui_mcm then
		RegisterScriptCallback("on_option_change", on_option_change)
		on_option_change()
	end
end
